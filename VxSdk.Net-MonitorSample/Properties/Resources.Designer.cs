//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonitorSample.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MonitorSample.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MM/dd/yyyy a\t hh:mm:ss tt.
        /// </summary>
        internal static string DateTimeFormat {
            get {
                return ResourceManager.GetString("DateTimeFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default License Key.
        /// </summary>
        internal static string DefaultLicenseHeader {
            get {
                return ResourceManager.GetString("DefaultLicenseHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ENTER_LICENSE_KEY_HERE.
        /// </summary>
        internal static string DefaultLicenseKey {
            get {
                return ResourceManager.GetString("DefaultLicenseKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The LicenseKey variable is still set to the default value (located in .\Source\VxUtils.cs).
        ///
        ///You will NOT be able to connect to ANY VideoXpert system until the value of LicenseKey is set to a valid license string..
        /// </summary>
        internal static string DefaultLicenseMessage {
            get {
                return ResourceManager.GetString("DefaultLicenseMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name.
        /// </summary>
        internal static string DisplayValue {
            get {
                return ResourceManager.GetString("DisplayValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensure a monitor, cell, and camera are selected.
        /// </summary>
        internal static string EnsureCellAndCameraAreSelected {
            get {
                return ResourceManager.GetString("EnsureCellAndCameraAreSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensure a monitor is selected.
        /// </summary>
        internal static string EnsureMonitorSelected {
            get {
                return ResourceManager.GetString("EnsureMonitorSelected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Threw while Init VxSdk.
        /// </summary>
        internal static string InitErrorMessage {
            get {
                return ResourceManager.GetString("InitErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error logging in: This system has not been licensed to run this integration and the grace period expired.  This integration must be licensed to proceed..
        /// </summary>
        internal static string LicenseLoginErrorMessage {
            get {
                return ResourceManager.GetString("LicenseLoginErrorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System License Warning.
        /// </summary>
        internal static string LicenseWarningHeader {
            get {
                return ResourceManager.GetString("LicenseWarningHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This system has not been licensed to run this integration.
        ///
        ///The grace period for this license is active but will expire on {0}.
        ///
        ///This integration will cease to function if the system remains unlicensed when the grace period expires..
        /// </summary>
        internal static string LicenseWarningMessage {
            get {
                return ResourceManager.GetString("LicenseWarningMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error logging in: .
        /// </summary>
        internal static string LoginErrorMessage {
            get {
                return ResourceManager.GetString("LoginErrorMessage", resourceCulture);
            }
        }
    }
}
